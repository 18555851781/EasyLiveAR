using System;
using System.Collections.Generic;
using UnityEngine;


namespace UnityEngine.XR.iOS
{
	public class UnityARHitTestExample : MonoBehaviour
	{
		public Transform m_HitTransform;
		public float maxRayDistance = 30.0f;
		public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer

        public static UnityARHitTestExample Instance;       //  本类实例

        GameObject ListMenu;
        GameObject HelpPlane;

        Touch Oldtouch1;        //  双指触摸点的初始位置 

        Touch Oldtouth2;

		void Awake()
		{
            m_HitTransform = transform;

            ListMenu = GameObject.Find("MenuList");

            HelpPlane = GameObject.Find("HelpWord_Plane");

            Instance = this;

		}

		bool HitTestWithResultType (ARPoint point, ARHitTestResultType resultTypes)
        {
            List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, resultTypes);
            if (hitResults.Count > 0) 
            {
                foreach (var hitResult in hitResults)
                {
                    Debug.Log ("Got hit!");
                    m_HitTransform.position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);
                    //m_HitTransform.rotation = UnityARMatrixOps.GetRotation (hitResult.worldTransform);
                    Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));
                    return true;
                }
            }
            return false;
        }

        // Update is called once per frame
        void Update()
        {
#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
            if (Input.GetMouseButtonDown(0))
            {
                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
                RaycastHit hit;

                //we'll try to hit one of the plane collider gameobjects that were generated by the plugin
                //effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
                if (Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer))
                {
                    //we're going to get the position from the contact point
                    m_HitTransform.position = hit.point;
                    Debug.Log(string.Format("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));

                    //and the rotation from the transform of the plane collider
                    m_HitTransform.rotation = hit.transform.rotation;
                }
            }
# else
            if (Input.touchCount > 0 && m_HitTransform != null)
			{
                if (Input.touchCount==1)
                {
                    var touch = Input.GetTouch(0);

                    //  限制触摸的位置

                    if (touch.position.y <= Screen.height / 4 || touch.position.y >= Screen.height / 5 * 4) 
                    {
                        return;
                    }

                    //  在商品清单跳出时将点击屏幕事件取消

                    if(ListMenu.transform.localPosition.y > -600)
                    {
                        return;
                    }
                    
                    //  在帮助面板跳出来的 touch事件取消

                    if (HelpPlane.transform.localPosition.y>=0 && HelpPlane.transform.localPosition.y<=100) 
                    {
                        return;
                    }

                    //   物体随触摸点移动
                    if (touch.phase == TouchPhase.Began || touch.phase == TouchPhase.Moved)
                    {

                        var screenPosition = Camera.main.ScreenToViewportPoint(touch.position);
                        ARPoint point = new ARPoint
                        {
                            x = screenPosition.x,
                            y = screenPosition.y

                        };

                        // prioritize reults types
                        ARHitTestResultType[] resultTypes =
                        {
                                        ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent, 
				                        // if you want to use infinite planes use this:
				                        //ARHitTestResultType.ARHitTestResultTypeExistingPlane,
				                        ARHitTestResultType.ARHitTestResultTypeHorizontalPlane,
                                        ARHitTestResultType.ARHitTestResultTypeFeaturePoint
                                    };

                        foreach (ARHitTestResultType resultType in resultTypes)
                        {
                            if (HitTestWithResultType(point, resultType))
                            {
                                return;
                            }
                        }
                    }
                }
                else if(Input.touchCount==2)
                {

                    //  新的触摸点位置
                    Touch touch1 = Input.GetTouch(0);
                    Touch touch2 = Input.GetTouch(1);

                    //  启用双指触摸  记录触摸点位置
                    if(touch2.phase==TouchPhase.Began)
                    {
                        Oldtouch1 = touch1;
                        Oldtouth2 = touch2;
                        return;
                    }
                    //  记录手指开始旋转
                    if(touch1.phase == TouchPhase.Moved || touch2.phase == TouchPhase.Moved)
                    {
                        Vector2 NewVec = touch2.position - touch1.position;
                        Vector2 OldVec = Oldtouth2.position - Oldtouch1.position;
                        float angle = Vector2.Angle(OldVec, NewVec);
                        angle *= Mathf.Sign(Vector3.Cross(OldVec, NewVec).z);

                        this.gameObject.transform.Rotate(0, -angle, 0);
                        Oldtouch1 = touch1;
                        Oldtouth2 = touch2;
                    }

                }else
                {
                        return;
                }
                    
			}
#endif

        }

	
	}
}

